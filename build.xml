<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- 
 QMetry Automation Framework provides a powerful and versatile platform to author 
Automated Test Cases in Behavior Driven, Keyword Driven or Code Driven approach
               
Copyright 2016 Infostretch Corporation

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE

You should have received a copy of the GNU General Public License along with this program in the name of LICENSE.txt in the root folder of the distribution. If not, see https://opensource.org/licenses/gpl-3.0.html

See the NOTICE.TXT file in root folder of this source files distribution 
for additional information regarding copyright ownership and licenses
of other open source software / files used by QMetry Automation Framework.

For any inquiry or need additional information, please contact support-qaf@infostretch.com

-->

<project basedir="." default="build" name="SeleniumAutomationFramework" xmlns:ivy="antlib:org.apache.ivy.ant">


	<!-- Sets the DSTAMP, TSTAMP, and TODAY properties in the current project -->
	<tstamp>
		<format property="build.timestamp" pattern="dd-MMM-yyyy HH:mm:ss" />
	</tstamp>

	<property file="build.properties" />
	<property name="test.dir" value="${basedir}/test" />
	<property name="test.src.dir" value="${test.dir}/src" />

	<path id="build.classpath">
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
			<include name="**/*.jar" />
		</fileset>
	</path>
	<path id="test.classpath">
		<fileset dir="${dist.dir}">
			<include name="*.jar" />
			<include name="**/*.jar" />
		</fileset>
		<path refid="build.classpath" />
	</path>
	<!-- IVY -->
	<target name="download-ivy" unless="skip.download">
		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any 
			special installation -->
		<echo message="installing ivy..." />
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<!-- ================================= target: install-ivy ================================= -->
	<target name="install-ivy" depends="download-ivy" description="--> install ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<!-- ================================= target: resolve ================================= -->
	<target name="resolve" description="--> retrieve dependencies with ivy" depends="install-ivy">
		<ivy:resolve file="ivy.xml" />
		<ivy:cachepath pathid="lib.path.id" />
		<ivy:addpath topath="build.classpath">
			<path refid="lib.path.id" />
		</ivy:addpath>
	</target>

	<!-- ================================= target: init ================================= -->
	<target name="init" depends="resolve">
		<mkdir dir="${bin.dir}" />
		<copy includeemptydirs="false" todir="${bin.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<!-- ================================= target: clean ================================= -->
	<target name="clean">
		<delete dir="${bin.dir}" failonerror="false" />
		<delete dir="${dist.dir}" failonerror="false" />
	</target>

	<!-- ================================= target: compile ================================= -->
	<target name="compile" depends="init">
		<echo level="info">--- compile (start) ---</echo>
		<javac srcdir="${src.dir}" destdir="${bin.dir}" classpathref="build.classpath" debug="false" source="${source}" target="${target}" />
		<echo level="info">--- compile (finished) ---</echo>
	</target>

	<!-- ================================= target: build ================================= -->
	<target name="build" depends="clean,compile" description="build jar">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${dist.file.name}.jar" basedir="${bin.dir}">
			<manifest>
				<attribute name="Vendor" value="Infostretch Corp." />
				<attribute name="Built-By" value="${user.name}" />
				<section name="Build-Info">
					<attribute name="Build-Time" value="${build.timestamp}" />
					<attribute name="Version" value="${version-num}" />
					<attribute name="Revision" value="${build-num}" />
				</section>
			</manifest>
		</jar>
	</target>
	<target name="make-jar" depends="clean, compile" description="build basic version">

		<mkdir dir="${dist.dir}" />
		<!-- All - core + testNG + step -->
		<jar destfile="${dist.dir}/qaf-qmetry-updator.jar" basedir="${bin.dir}" excludes="**/test/**" includes="**/*.*">
			<metainf dir="." includes="LICENSE.txt,NOTICE.txt" />
			<manifest>
				<attribute name="Vendor" value="Infostretch Corp." />
				<attribute name="Built-By" value="${user.name}" />
			</manifest>
			<metainf dir="${src.dir}" includes="**/aop.xml" />
			<service type="org.testng.ITestNGListener">
				<provider classname="com.qmetry.qaf.automation.testng.pro.QAFAnnotationTransformer2" />

				<provider classname="com.qmetry.qaf.automation.testng.pro.QAFInvokedMethodListener2" />

				<provider classname="com.qmetry.qaf.automation.testng.pro.QAFMethodInterceptor" />

				<provider classname="com.qmetry.qaf.automation.testng.pro.QAFResultListener" />
				<provider classname="com.qmetry.qaf.automation.testng.pro.QAFSuiteListener" />
			</service>
		</jar>

	</target>
	<target name="test-compile" depends="init">
		<taskdef classpathref="test.classpath" resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" />

		<echo level="info">--- test compile (start) ---</echo>
		<iajc source="${source}" target="${target}" showweaveinfo="true" verbose="true" destdir="${bin.dir}" debug="false">
			<inpath location="${src.dir}">
			</inpath>
			<sourceroots>
				<pathelement location="${test.src.dir}" />
			</sourceroots>
			<classpath refid="test.classpath">
			</classpath>
		</iajc>
		<echo level="info">--- test compile (finished) ---</echo>
	</target>

	<target name="runtest" depends="make-jar,test-compile">
		<taskdef resource="testngtasks" classpathref="test.classpath" />
		<testng classpathref="test.classpath" workingDir="${test.dir}" outputDir="${test.dir}/test-results" haltOnFailure="true" verbose="2">
			<classpath location="${bin.dir}" />
			<xmlfileset dir="${test.dir}/config" includes="testrun_config.xml" />
			<sysproperty key="log4j.configuration" value="file:///${test.dir}/log4j.properties" />
			<sysproperty key="outputDir" value="test-results" />
		</testng>
	</target>
</project>
